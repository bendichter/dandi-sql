# Generated by Django 5.2.3 on 2025-06-22 00:00

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('dandisets', '0009_alter_asset_options_remove_asset_path_and_more'),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name='activityequipment',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='activityequipment',
            name='activity',
        ),
        migrations.RemoveField(
            model_name='activityequipment',
            name='equipment',
        ),
        migrations.AlterUniqueTogether(
            name='assetaccess',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='assetaccess',
            name='access_requirement',
        ),
        migrations.RemoveField(
            model_name='assetaccess',
            name='asset',
        ),
        migrations.AlterUniqueTogether(
            name='assetapproach',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='assetapproach',
            name='approach',
        ),
        migrations.RemoveField(
            model_name='assetapproach',
            name='asset',
        ),
        migrations.AlterUniqueTogether(
            name='assetmeasurementtechnique',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='assetmeasurementtechnique',
            name='asset',
        ),
        migrations.RemoveField(
            model_name='assetmeasurementtechnique',
            name='measurement_technique',
        ),
        migrations.AlterUniqueTogether(
            name='assetwasattributedto',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='assetwasattributedto',
            name='asset',
        ),
        migrations.RemoveField(
            model_name='assetwasattributedto',
            name='participant',
        ),
        migrations.AlterUniqueTogether(
            name='assetwasgeneratedby',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='assetwasgeneratedby',
            name='activity',
        ),
        migrations.RemoveField(
            model_name='assetwasgeneratedby',
            name='asset',
        ),
        migrations.RemoveField(
            model_name='dandisetabout',
            name='anatomy',
        ),
        migrations.RemoveField(
            model_name='dandisetabout',
            name='dandiset',
        ),
        migrations.RemoveField(
            model_name='dandisetabout',
            name='disorder',
        ),
        migrations.RemoveField(
            model_name='dandisetabout',
            name='generic_type',
        ),
        migrations.AlterModelTableComment(
            name='accessrequirements',
            table_comment='Access restrictions and requirements for datasets (open access, embargoed, etc.)',
        ),
        migrations.AlterModelTableComment(
            name='activity',
            table_comment='Research activities, projects, sessions, and publishing activities in the data provenance',
        ),
        migrations.AlterModelTableComment(
            name='affiliation',
            table_comment='Organizational affiliations for contributors (research institutions, universities, companies)',
        ),
        migrations.AlterModelTableComment(
            name='agent',
            table_comment='Generic agents (entities that can perform actions) in the data provenance',
        ),
        migrations.AlterModelTableComment(
            name='anatomy',
            table_comment='Anatomical structures using UBERON or other ontology identifiers (e.g., hippocampus, cortex)',
        ),
        migrations.AlterModelTableComment(
            name='approachtype',
            table_comment='Experimental approaches used in studies (e.g., electrophysiology, microscopy, behavioral)',
        ),
        migrations.AlterModelTableComment(
            name='assaytype',
            table_comment='Ontology for Biomedical Investigations (OBI) based assay types used in experiments',
        ),
        migrations.AlterModelTableComment(
            name='asset',
            table_comment='Individual data files within datasets (NWB files, images, videos, etc.)',
        ),
        migrations.AlterModelTableComment(
            name='assetdandiset',
            table_comment='Links individual data files to the datasets they belong to, including file paths',
        ),
        migrations.AlterModelTableComment(
            name='assetssummary',
            table_comment='Statistical summaries of the assets contained within a dataset (file counts, subjects, etc.)',
        ),
        migrations.AlterModelTableComment(
            name='assetssummaryapproach',
            table_comment='Links asset summaries to the experimental approaches used in the datasets',
        ),
        migrations.AlterModelTableComment(
            name='assetssummarydatastandard',
            table_comment='Links asset summaries to the data format standards used in the datasets',
        ),
        migrations.AlterModelTableComment(
            name='assetssummarymeasurementtechnique',
            table_comment='Links asset summaries to the measurement techniques used in the datasets',
        ),
        migrations.AlterModelTableComment(
            name='assetssummaryspecies',
            table_comment='Links asset summaries to the species involved in the datasets',
        ),
        migrations.AlterModelTableComment(
            name='contactpoint',
            table_comment='Contact information for reaching people or organizations associated with datasets',
        ),
        migrations.AlterModelTableComment(
            name='contributor',
            table_comment='People and organizations that contribute to datasets (authors, data collectors, maintainers, etc.)',
        ),
        migrations.AlterModelTableComment(
            name='contributoraffiliation',
            table_comment='Links contributors to their institutional affiliations',
        ),
        migrations.AlterModelTableComment(
            name='dandiset',
            table_comment='DANDI datasets - the main repository entities that contain collections of neuroscience data files',
        ),
        migrations.AlterModelTableComment(
            name='dandisetaccessrequirements',
            table_comment='Links datasets to their access restrictions and requirements',
        ),
        migrations.AlterModelTableComment(
            name='dandisetcontributor',
            table_comment='Links datasets to their contributors with specific roles and citation preferences',
        ),
        migrations.AlterModelTableComment(
            name='dandisetethicsapproval',
            table_comment='Links datasets to their ethics committee approvals',
        ),
        migrations.AlterModelTableComment(
            name='dandisetrelatedresource',
            table_comment='Links datasets to external related resources (publications, code, other datasets)',
        ),
        migrations.AlterModelTableComment(
            name='dandisetwasgeneratedby',
            table_comment='Links datasets to the research projects that generated them',
        ),
        migrations.AlterModelTableComment(
            name='disorder',
            table_comment='Medical disorders and conditions using Biolink, SNOMED, or other medical ontologies',
        ),
        migrations.AlterModelTableComment(
            name='equipment',
            table_comment='Laboratory and research equipment used in experiments and data collection',
        ),
        migrations.AlterModelTableComment(
            name='ethicsapproval',
            table_comment='Ethics committee approvals for research projects involving human or animal subjects',
        ),
        migrations.AlterModelTableComment(
            name='generictype',
            table_comment="Generic type for categorizing dataset subject matter that doesn't fit other specific types",
        ),
        migrations.AlterModelTableComment(
            name='lindimetadata',
            table_comment='Stores LINDI (Linked Data Interface) metadata for efficient access to NWB file structure without downloading',
        ),
        migrations.AlterModelTableComment(
            name='measurementtechniquetype',
            table_comment='Specific measurement techniques used in experiments (e.g., patch clamp, calcium imaging)',
        ),
        migrations.AlterModelTableComment(
            name='participant',
            table_comment='Research participants and experimental subjects with demographic and biological information',
        ),
        migrations.AlterModelTableComment(
            name='resource',
            table_comment='External resources related to datasets (publications, code repositories, other datasets, etc.)',
        ),
        migrations.AlterModelTableComment(
            name='sampletype',
            table_comment='OBI based sample types (e.g., tissue, cell culture, brain slice)',
        ),
        migrations.AlterModelTableComment(
            name='sextype',
            table_comment='Biological sex information for experimental subjects',
        ),
        migrations.AlterModelTableComment(
            name='software',
            table_comment='Software tools and applications used in data collection, analysis, or processing',
        ),
        migrations.AlterModelTableComment(
            name='speciestype',
            table_comment='Species taxonomy information for experimental subjects',
        ),
        migrations.AlterModelTableComment(
            name='standardstype',
            table_comment='Data format standards used (e.g., NWB, BIDS, OME-NGFF)',
        ),
        migrations.AlterModelTableComment(
            name='straintype',
            table_comment='Genetic strain information for experimental subjects',
        ),
        migrations.AlterModelTableComment(
            name='synctracker',
            table_comment='Tracks synchronization operations from the DANDI Archive API to keep local data up-to-date',
        ),
        migrations.RemoveField(
            model_name='accessrequirements',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='affiliation',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='agent',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='anatomy',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='approachtype',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='assaytype',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='asset',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='assetssummary',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='contactpoint',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='dandiset',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='disorder',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='equipment',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='ethicsapproval',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='generictype',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='measurementtechniquetype',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='participant',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='resource',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='sampletype',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='sextype',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='software',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='speciestype',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='standardstype',
            name='schema_key',
        ),
        migrations.RemoveField(
            model_name='straintype',
            name='schema_key',
        ),
        migrations.AddField(
            model_name='activity',
            name='agents',
            field=models.ManyToManyField(blank=True, help_text='Generic agents involved in this activity', related_name='activities', to='dandisets.agent'),
        ),
        migrations.AddField(
            model_name='activity',
            name='contributors',
            field=models.ManyToManyField(blank=True, help_text='People or organizations associated with this activity', related_name='activities', to='dandisets.contributor'),
        ),
        migrations.AddField(
            model_name='activity',
            name='equipment',
            field=models.ManyToManyField(blank=True, help_text='Equipment and instruments used in this activity', related_name='activities', to='dandisets.equipment'),
        ),
        migrations.AddField(
            model_name='activity',
            name='software',
            field=models.ManyToManyField(blank=True, help_text='Software tools used in this activity', related_name='activities', to='dandisets.software'),
        ),
        migrations.AddField(
            model_name='asset',
            name='access_requirements',
            field=models.ManyToManyField(blank=True, help_text='Access restrictions and requirements for this asset', related_name='assets', to='dandisets.accessrequirements'),
        ),
        migrations.AddField(
            model_name='asset',
            name='activities',
            field=models.ManyToManyField(blank=True, help_text='Experimental sessions or activities that generated this asset', related_name='generated_assets', to='dandisets.activity'),
        ),
        migrations.AddField(
            model_name='asset',
            name='approaches',
            field=models.ManyToManyField(blank=True, help_text="Experimental approaches used to collect this asset's data", related_name='assets', to='dandisets.approachtype'),
        ),
        migrations.AddField(
            model_name='asset',
            name='measurement_techniques',
            field=models.ManyToManyField(blank=True, help_text="Specific measurement techniques used to collect this asset's data", related_name='assets', to='dandisets.measurementtechniquetype'),
        ),
        migrations.AddField(
            model_name='asset',
            name='participants',
            field=models.ManyToManyField(blank=True, help_text="Research subjects or participants this asset's data was collected from", related_name='assets', to='dandisets.participant'),
        ),
        migrations.AddField(
            model_name='dandiset',
            name='anatomy',
            field=models.ManyToManyField(blank=True, help_text='Anatomical structures studied in this dataset', related_name='dandisets', to='dandisets.anatomy'),
        ),
        migrations.AddField(
            model_name='dandiset',
            name='disorders',
            field=models.ManyToManyField(blank=True, help_text='Medical disorders and conditions studied in this dataset', related_name='dandisets', to='dandisets.disorder'),
        ),
        migrations.AddField(
            model_name='dandiset',
            name='generic_types',
            field=models.ManyToManyField(blank=True, help_text='Generic subject matter categories for this dataset', related_name='dandisets', to='dandisets.generictype'),
        ),
        migrations.AlterField(
            model_name='accessrequirements',
            name='contact_point',
            field=models.ForeignKey(blank=True, help_text='Who or where to look for information about access', null=True, on_delete=django.db.models.deletion.SET_NULL, to='dandisets.contactpoint'),
        ),
        migrations.AlterField(
            model_name='accessrequirements',
            name='description',
            field=models.TextField(blank=True, help_text='Information about access requirements when embargoed or restricted', null=True),
        ),
        migrations.AlterField(
            model_name='activity',
            name='end_date',
            field=models.DateTimeField(blank=True, help_text='When the activity ended', null=True),
        ),
        migrations.AlterField(
            model_name='activity',
            name='identifier',
            field=models.TextField(blank=True, help_text='Unique identifier for the activity', null=True),
        ),
        migrations.AlterField(
            model_name='activity',
            name='schema_key',
            field=models.CharField(choices=[('Activity', 'Activity'), ('Project', 'Project'), ('Session', 'Session'), ('PublishActivity', 'PublishActivity')], default='Activity', help_text='Type of activity (Activity, Project, Session, or PublishActivity)', max_length=20),
        ),
        migrations.AlterField(
            model_name='activity',
            name='start_date',
            field=models.DateTimeField(blank=True, help_text='When the activity started', null=True),
        ),
        migrations.AlterField(
            model_name='agent',
            name='name',
            field=models.TextField(help_text='Name of the agent'),
        ),
        migrations.AlterField(
            model_name='agent',
            name='url',
            field=models.URLField(blank=True, help_text='Web page for the agent', null=True),
        ),
        migrations.AlterField(
            model_name='asset',
            name='blob_date_modified',
            field=models.DateTimeField(blank=True, help_text='When the actual file content was last modified', null=True),
        ),
        migrations.AlterField(
            model_name='asset',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, help_text='When this record was created in the local database'),
        ),
        migrations.AlterField(
            model_name='asset',
            name='dandisets',
            field=models.ManyToManyField(help_text='Dandisets that contain this asset', related_name='assets', through='dandisets.AssetDandiset', to='dandisets.dandiset'),
        ),
        migrations.AlterField(
            model_name='asset',
            name='date_modified',
            field=models.DateTimeField(blank=True, help_text='When the asset metadata was last modified', null=True),
        ),
        migrations.AlterField(
            model_name='asset',
            name='date_published',
            field=models.DateTimeField(blank=True, help_text='When the asset was published', null=True),
        ),
        migrations.AlterField(
            model_name='asset',
            name='published_by',
            field=models.ForeignKey(blank=True, help_text='Publishing activity that made this asset public', limit_choices_to={'schema_key': 'PublishActivity'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dandisets.activity'),
        ),
        migrations.AlterField(
            model_name='asset',
            name='schema_version',
            field=models.CharField(default='0.6.7', help_text='Version of the DANDI schema used for this asset', max_length=20),
        ),
        migrations.AlterField(
            model_name='asset',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, help_text='When this record was last updated in the local database'),
        ),
        migrations.AlterField(
            model_name='assetdandiset',
            name='path',
            field=models.TextField(help_text='Path to the asset within this specific dandiset'),
        ),
        migrations.AlterField(
            model_name='assetssummary',
            name='number_of_bytes',
            field=models.BigIntegerField(help_text='Total size of all assets in bytes'),
        ),
        migrations.AlterField(
            model_name='assetssummary',
            name='number_of_cells',
            field=models.IntegerField(blank=True, help_text='Total number of cells recorded from', null=True),
        ),
        migrations.AlterField(
            model_name='assetssummary',
            name='number_of_files',
            field=models.IntegerField(help_text='Total number of files/assets in the dandiset'),
        ),
        migrations.AlterField(
            model_name='assetssummary',
            name='number_of_samples',
            field=models.IntegerField(blank=True, help_text='Total number of biological samples', null=True),
        ),
        migrations.AlterField(
            model_name='assetssummary',
            name='number_of_subjects',
            field=models.IntegerField(blank=True, help_text='Total number of experimental subjects', null=True),
        ),
        migrations.AlterField(
            model_name='assetssummary',
            name='variable_measured',
            field=models.JSONField(blank=True, default=list, help_text='List of variables/measurements recorded'),
        ),
        migrations.AlterField(
            model_name='contributor',
            name='email',
            field=models.EmailField(blank=True, help_text='Email address of the contributor', max_length=254, null=True),
        ),
        migrations.AlterField(
            model_name='contributor',
            name='name',
            field=models.TextField(blank=True, help_text='Full name of the person or organization', null=True),
        ),
        migrations.AlterField(
            model_name='contributor',
            name='schema_key',
            field=models.CharField(choices=[('Person', 'Person'), ('Organization', 'Organization'), ('Contributor', 'Contributor')], default='Contributor', help_text='Type of contributor (Person, Organization, or Contributor)', max_length=20),
        ),
        migrations.AlterField(
            model_name='contributor',
            name='url',
            field=models.URLField(blank=True, help_text='Web page for the contributor (personal page, organization website)', null=True),
        ),
        migrations.AlterField(
            model_name='contributoraffiliation',
            name='affiliation',
            field=models.ForeignKey(help_text='The organization the contributor is affiliated with', on_delete=django.db.models.deletion.CASCADE, to='dandisets.affiliation'),
        ),
        migrations.AlterField(
            model_name='contributoraffiliation',
            name='contributor',
            field=models.ForeignKey(help_text='The contributor linked to this affiliation', on_delete=django.db.models.deletion.CASCADE, to='dandisets.contributor'),
        ),
        migrations.AlterField(
            model_name='dandiset',
            name='assets_summary',
            field=models.OneToOneField(blank=True, help_text='Statistical summary of the assets in this dandiset', null=True, on_delete=django.db.models.deletion.SET_NULL, to='dandisets.assetssummary'),
        ),
        migrations.AlterField(
            model_name='dandiset',
            name='citation',
            field=models.TextField(blank=True, help_text='Automatically generated citation for this dandiset', null=True),
        ),
        migrations.AlterField(
            model_name='dandiset',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, help_text='When this record was created in the local database'),
        ),
        migrations.AlterField(
            model_name='dandiset',
            name='date_created',
            field=models.DateTimeField(blank=True, help_text='When the dandiset was originally created', null=True),
        ),
        migrations.AlterField(
            model_name='dandiset',
            name='date_modified',
            field=models.DateTimeField(blank=True, help_text='Last modification date and time', null=True),
        ),
        migrations.AlterField(
            model_name='dandiset',
            name='date_published',
            field=models.DateTimeField(blank=True, help_text='When the dandiset was published', null=True),
        ),
        migrations.AlterField(
            model_name='dandiset',
            name='doi',
            field=models.CharField(blank=True, help_text='Digital Object Identifier for this dandiset', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='dandiset',
            name='license',
            field=models.JSONField(default=list, help_text='Licenses associated with the item (CC0, CC-BY-4.0, etc.)'),
        ),
        migrations.AlterField(
            model_name='dandiset',
            name='manifest_location',
            field=models.JSONField(blank=True, default=list, help_text='URLs to dandiset manifest files'),
        ),
        migrations.AlterField(
            model_name='dandiset',
            name='published_by',
            field=models.ForeignKey(blank=True, help_text='Publishing activity that made this dandiset public', limit_choices_to={'schema_key': 'PublishActivity'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dandisets.activity'),
        ),
        migrations.AlterField(
            model_name='dandiset',
            name='schema_version',
            field=models.CharField(default='0.6.4', help_text='Version of the DANDI schema used for this dandiset', max_length=20),
        ),
        migrations.AlterField(
            model_name='dandiset',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, help_text='When this record was last updated in the local database'),
        ),
        migrations.AlterField(
            model_name='equipment',
            name='identifier',
            field=models.TextField(blank=True, help_text='Unique identifier for the equipment', null=True),
        ),
        migrations.AlterField(
            model_name='ethicsapproval',
            name='contact_point',
            field=models.ForeignKey(blank=True, help_text='Information about the ethics approval committee', null=True, on_delete=django.db.models.deletion.SET_NULL, to='dandisets.contactpoint'),
        ),
        migrations.AlterField(
            model_name='ethicsapproval',
            name='identifier',
            field=models.TextField(help_text='Approved Protocol identifier, often a number or alphanumeric string'),
        ),
        migrations.AlterField(
            model_name='participant',
            name='sex',
            field=models.ForeignKey(blank=True, help_text='Biological sex of the experimental subject', null=True, on_delete=django.db.models.deletion.CASCADE, to='dandisets.sextype'),
        ),
        migrations.AlterField(
            model_name='participant',
            name='species',
            field=models.ForeignKey(blank=True, help_text='Species of the experimental subject', null=True, on_delete=django.db.models.deletion.CASCADE, to='dandisets.speciestype'),
        ),
        migrations.AlterField(
            model_name='participant',
            name='strain',
            field=models.ForeignKey(blank=True, help_text='Genetic strain of the experimental subject', null=True, on_delete=django.db.models.deletion.CASCADE, to='dandisets.straintype'),
        ),
        migrations.AlterField(
            model_name='resource',
            name='identifier',
            field=models.TextField(blank=True, help_text='Unique identifier for the resource (DOI, URL, etc.)', null=True),
        ),
        migrations.AlterField(
            model_name='resource',
            name='repository',
            field=models.CharField(blank=True, help_text='Name of the repository in which the resource is housed', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='resource',
            name='resource_type',
            field=models.CharField(blank=True, help_text='The type of resource (Dataset, Software, Publication, etc.)', max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='software',
            name='name',
            field=models.TextField(help_text='Name of the software'),
        ),
        migrations.AlterField(
            model_name='software',
            name='version',
            field=models.CharField(help_text='Version number or string of the software', max_length=100),
        ),
        migrations.DeleteModel(
            name='ActivityAssociation',
        ),
        migrations.DeleteModel(
            name='ActivityEquipment',
        ),
        migrations.DeleteModel(
            name='AssetAccess',
        ),
        migrations.DeleteModel(
            name='AssetApproach',
        ),
        migrations.DeleteModel(
            name='AssetMeasurementTechnique',
        ),
        migrations.DeleteModel(
            name='AssetWasAttributedTo',
        ),
        migrations.DeleteModel(
            name='AssetWasGeneratedBy',
        ),
        migrations.DeleteModel(
            name='DandisetAbout',
        ),
    ]
