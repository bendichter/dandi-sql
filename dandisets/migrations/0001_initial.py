# Generated by Django 5.2.3 on 2025-06-14 21:39

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, null=True)),
                ('name', models.CharField(help_text='The name of the activity', max_length=150)),
                ('description', models.TextField(blank=True, help_text='The description of the activity', null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('schema_key', models.CharField(choices=[('Activity', 'Activity'), ('Project', 'Project'), ('Session', 'Session'), ('PublishActivity', 'PublishActivity')], default='Activity', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Affiliation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, help_text='A ror.org identifier for institutions', null=True)),
                ('name', models.TextField(help_text='Name of organization')),
                ('schema_key', models.CharField(default='Affiliation', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, help_text='Identifier for an agent', null=True)),
                ('name', models.TextField()),
                ('url', models.URLField(blank=True, null=True)),
                ('schema_key', models.CharField(default='Agent', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Anatomy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, help_text='The identifier can be any url or a compact URI', null=True)),
                ('name', models.CharField(blank=True, help_text='The name of the item', max_length=500, null=True)),
                ('schema_key', models.CharField(default='Anatomy', max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ApproachType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, help_text='The identifier can be any url or a compact URI', null=True)),
                ('name', models.CharField(blank=True, help_text='The name of the item', max_length=500, null=True)),
                ('schema_key', models.CharField(default='ApproachType', max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssayType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, help_text='The identifier can be any url or a compact URI', null=True)),
                ('name', models.CharField(blank=True, help_text='The name of the item', max_length=500, null=True)),
                ('schema_key', models.CharField(default='AssayType', max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssetsSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_of_bytes', models.BigIntegerField()),
                ('number_of_files', models.IntegerField()),
                ('number_of_subjects', models.IntegerField(blank=True, null=True)),
                ('number_of_samples', models.IntegerField(blank=True, null=True)),
                ('number_of_cells', models.IntegerField(blank=True, null=True)),
                ('variable_measured', models.JSONField(blank=True, default=list)),
                ('schema_key', models.CharField(default='AssetsSummary', max_length=50)),
            ],
            options={
                'verbose_name_plural': 'Assets summaries',
            },
        ),
        migrations.CreateModel(
            name='ContactPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(blank=True, help_text='Email address of contact', max_length=254, null=True)),
                ('url', models.URLField(blank=True, help_text='A Web page to find information on how to contact', null=True)),
                ('schema_key', models.CharField(default='ContactPoint', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Contributor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, help_text='Use a common identifier such as ORCID for people or ROR for institutions', null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('role_name', models.JSONField(blank=True, default=list, help_text='Role(s) of the contributor')),
                ('include_in_citation', models.BooleanField(default=True, help_text='Include contributor in citation')),
                ('award_number', models.TextField(blank=True, help_text='Identifier associated with a sponsored or gift award', null=True)),
                ('schema_key', models.CharField(choices=[('Person', 'Person'), ('Organization', 'Organization'), ('Contributor', 'Contributor')], default='Contributor', max_length=20)),
                ('contact_point', models.JSONField(blank=True, default=list, help_text='Organization contact information')),
            ],
        ),
        migrations.CreateModel(
            name='Disorder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, help_text='The identifier can be any url or a compact URI', null=True)),
                ('name', models.CharField(blank=True, help_text='The name of the item', max_length=500, null=True)),
                ('dx_date', models.JSONField(blank=True, help_text='Dates of diagnosis', null=True)),
                ('schema_key', models.CharField(default='Disorder', max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, null=True)),
                ('name', models.CharField(help_text='A name for the equipment', max_length=150)),
                ('description', models.TextField(blank=True, help_text='The description of the equipment', null=True)),
                ('schema_key', models.CharField(default='Equipment', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='GenericType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, help_text='The identifier can be any url or a compact URI', null=True)),
                ('name', models.CharField(blank=True, help_text='The name of the item', max_length=500, null=True)),
                ('schema_key', models.CharField(default='GenericType', max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurementTechniqueType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, help_text='The identifier can be any url or a compact URI', null=True)),
                ('name', models.CharField(blank=True, help_text='The name of the item', max_length=500, null=True)),
                ('schema_key', models.CharField(default='MeasurementTechniqueType', max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, help_text='A title of the resource', null=True)),
                ('url', models.URLField(blank=True, help_text='URL of the resource', null=True)),
                ('repository', models.CharField(blank=True, help_text='Name of the repository', max_length=200, null=True)),
                ('relation', models.CharField(choices=[('dcite:IsCitedBy', 'Is Cited By'), ('dcite:Cites', 'Cites'), ('dcite:IsSupplementTo', 'Is Supplement To'), ('dcite:IsSupplementedBy', 'Is Supplemented By'), ('dcite:IsContinuedBy', 'Is Continued By'), ('dcite:Continues', 'Continues'), ('dcite:Describes', 'Describes'), ('dcite:IsDescribedBy', 'Is Described By'), ('dcite:HasMetadata', 'Has Metadata'), ('dcite:IsMetadataFor', 'Is Metadata For'), ('dcite:HasVersion', 'Has Version'), ('dcite:IsVersionOf', 'Is Version Of'), ('dcite:IsNewVersionOf', 'Is New Version Of'), ('dcite:IsPreviousVersionOf', 'Is Previous Version Of'), ('dcite:IsPartOf', 'Is Part Of'), ('dcite:HasPart', 'Has Part'), ('dcite:IsReferencedBy', 'Is Referenced By'), ('dcite:References', 'References'), ('dcite:IsDocumentedBy', 'Is Documented By'), ('dcite:Documents', 'Documents'), ('dcite:IsCompiledBy', 'Is Compiled By'), ('dcite:Compiles', 'Compiles'), ('dcite:IsVariantFormOf', 'Is Variant Form Of'), ('dcite:IsOriginalFormOf', 'Is Original Form Of'), ('dcite:IsIdenticalTo', 'Is Identical To'), ('dcite:IsReviewedBy', 'Is Reviewed By'), ('dcite:Reviews', 'Reviews'), ('dcite:IsDerivedFrom', 'Is Derived From'), ('dcite:IsSourceOf', 'Is Source Of'), ('dcite:IsRequiredBy', 'Is Required By'), ('dcite:Requires', 'Requires'), ('dcite:Obsoletes', 'Obsoletes'), ('dcite:IsObsoletedBy', 'Is Obsoleted By'), ('dcite:IsPublishedIn', 'Is Published In')], help_text='How the resource is related to the dataset', max_length=30)),
                ('resource_type', models.CharField(blank=True, help_text='The type of resource', max_length=50, null=True)),
                ('schema_key', models.CharField(default='Resource', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='SampleType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, help_text='The identifier can be any url or a compact URI', null=True)),
                ('name', models.CharField(blank=True, help_text='The name of the item', max_length=500, null=True)),
                ('schema_key', models.CharField(default='SampleType', max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SexType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, help_text='The identifier can be any url or a compact URI', null=True)),
                ('name', models.CharField(blank=True, help_text='The name of the item', max_length=500, null=True)),
                ('schema_key', models.CharField(default='SexType', max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, help_text='RRID of the software from scicrunch.org', null=True)),
                ('name', models.TextField()),
                ('version', models.CharField(max_length=100)),
                ('url', models.URLField(blank=True, help_text='Web page for the software', null=True)),
                ('schema_key', models.CharField(default='Software', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='SpeciesType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, help_text='The identifier can be any url or a compact URI', null=True)),
                ('name', models.CharField(blank=True, help_text='The name of the item', max_length=500, null=True)),
                ('schema_key', models.CharField(default='SpeciesType', max_length=50)),
            ],
            options={
                'verbose_name_plural': 'Species',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StandardsType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, help_text='The identifier can be any url or a compact URI', null=True)),
                ('name', models.CharField(blank=True, help_text='The name of the item', max_length=500, null=True)),
                ('schema_key', models.CharField(default='StandardsType', max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StrainType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(blank=True, help_text='The identifier can be any url or a compact URI', null=True)),
                ('name', models.CharField(blank=True, help_text='The name of the item', max_length=500, null=True)),
                ('schema_key', models.CharField(default='StrainType', max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dandi_asset_id', models.CharField(help_text='DANDI asset identifier', max_length=100, unique=True)),
                ('identifier', models.CharField(help_text='Asset identifier', max_length=100)),
                ('schema_version', models.CharField(default='0.6.7', max_length=20)),
                ('schema_key', models.CharField(default='Asset', max_length=50)),
                ('path', models.TextField(help_text='Path to the asset within the dandiset')),
                ('content_size', models.BigIntegerField(help_text='Size of the asset in bytes')),
                ('encoding_format', models.CharField(choices=[('application/x-nwb', 'NWB'), ('application/x-hdf5', 'HDF5'), ('image/tiff', 'TIFF'), ('video/mp4', 'MP4'), ('application/json', 'JSON')], help_text='Media type, typically expressed using a MIME format', max_length=50)),
                ('date_modified', models.DateTimeField(blank=True, null=True)),
                ('date_published', models.DateTimeField(blank=True, null=True)),
                ('blob_date_modified', models.DateTimeField(blank=True, null=True)),
                ('digest', models.JSONField(help_text='Digest/checksum information')),
                ('content_url', models.JSONField(default=list, help_text='URLs to access the content')),
                ('variable_measured', models.JSONField(blank=True, default=list, help_text='Variables measured in this asset')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_by', models.ForeignKey(blank=True, limit_choices_to={'schema_key': 'PublishActivity'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dandisets.activity')),
            ],
            options={
                'ordering': ['path'],
            },
        ),
        migrations.CreateModel(
            name='AccessRequirements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('dandi:OpenAccess', 'Open Access'), ('dandi:EmbargoedAccess', 'Embargoed Access')], help_text='The access status of the item', max_length=30)),
                ('description', models.TextField(blank=True, help_text='Information about access requirements', null=True)),
                ('embargoed_until', models.DateField(blank=True, help_text='Date on which embargo ends', null=True)),
                ('schema_key', models.CharField(default='AccessRequirements', max_length=50)),
                ('contact_point', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dandisets.contactpoint')),
            ],
        ),
        migrations.CreateModel(
            name='Dandiset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dandi_id', models.CharField(help_text='Full DANDI identifier with version like DANDI:000003/0.230629.1955', max_length=100, unique=True)),
                ('identifier', models.CharField(help_text='A Dandiset identifier', max_length=100)),
                ('base_id', models.CharField(db_index=True, help_text='Base DANDI ID without version (e.g., DANDI:000003)', max_length=50)),
                ('version', models.CharField(blank=True, help_text='Version string (e.g., 0.230629.1955) - null for drafts', max_length=100, null=True)),
                ('version_order', models.IntegerField(default=1, help_text='Numeric ordering for versions (0=draft, 1=first published, 2=second, etc.)')),
                ('is_draft', models.BooleanField(default=False, help_text='Whether this is a draft version (not yet published)')),
                ('is_latest', models.BooleanField(default=True, help_text='Whether this is the latest version of this dandiset')),
                ('schema_version', models.CharField(default='0.6.4', max_length=20)),
                ('schema_key', models.CharField(default='Dandiset', max_length=50)),
                ('name', models.CharField(help_text='A title associated with the Dandiset', max_length=500)),
                ('description', models.TextField(help_text='A description of the Dandiset', max_length=10000)),
                ('date_created', models.DateTimeField(blank=True, null=True)),
                ('date_modified', models.DateTimeField(blank=True, null=True)),
                ('date_published', models.DateTimeField(blank=True, null=True)),
                ('license', models.JSONField(default=list, help_text='Licenses associated with the item')),
                ('citation', models.TextField(blank=True, null=True)),
                ('url', models.URLField(blank=True, help_text='permalink to the item', null=True)),
                ('repository', models.URLField(blank=True, help_text='location of the item', null=True)),
                ('doi', models.CharField(blank=True, max_length=200, null=True)),
                ('keywords', models.JSONField(blank=True, default=list, help_text='Keywords used to describe this content')),
                ('study_target', models.JSONField(blank=True, default=list, help_text='Objectives or specific questions of the study')),
                ('protocol', models.JSONField(blank=True, default=list, help_text='A list of persistent URLs describing the protocol')),
                ('acknowledgement', models.TextField(blank=True, help_text='Any acknowledgments not covered by contributors', null=True)),
                ('manifest_location', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assets_summary', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dandisets.assetssummary')),
                ('previous_version', models.ForeignKey(blank=True, help_text='Previous version of this dandiset', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='newer_versions', to='dandisets.dandiset')),
                ('published_by', models.ForeignKey(blank=True, limit_choices_to={'schema_key': 'PublishActivity'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dandisets.activity')),
            ],
            options={
                'ordering': ['base_id', '-version_order'],
                'unique_together': {('base_id', 'version')},
            },
        ),
        migrations.CreateModel(
            name='AssetDandiset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True, help_text='When this asset was added to this dandiset')),
                ('is_primary', models.BooleanField(default=True, help_text='Whether this is the primary dandiset for this asset')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='asset_dandisets', to='dandisets.asset')),
                ('dandiset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dandiset_assets', to='dandisets.dandiset')),
            ],
            options={
                'verbose_name': 'Asset-Dandiset Association',
                'verbose_name_plural': 'Asset-Dandiset Associations',
                'unique_together': {('asset', 'dandiset')},
            },
        ),
        migrations.AddField(
            model_name='asset',
            name='dandisets',
            field=models.ManyToManyField(related_name='assets', through='dandisets.AssetDandiset', to='dandisets.dandiset'),
        ),
        migrations.CreateModel(
            name='EthicsApproval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.TextField(help_text='Approved Protocol identifier')),
                ('schema_key', models.CharField(default='EthicsApproval', max_length=50)),
                ('contact_point', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dandisets.contactpoint')),
            ],
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text='Subject ID', max_length=100)),
                ('age', models.JSONField(blank=True, help_text='Age information with value and unit', null=True)),
                ('schema_key', models.CharField(default='Participant', max_length=50)),
                ('sex', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dandisets.sextype')),
                ('species', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dandisets.speciestype')),
                ('strain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dandisets.straintype')),
            ],
        ),
        migrations.CreateModel(
            name='AssetAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_requirement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dandisets.accessrequirements')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_requirements', to='dandisets.asset')),
            ],
            options={
                'unique_together': {('asset', 'access_requirement')},
            },
        ),
        migrations.CreateModel(
            name='AssetApproach',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dandisets.approachtype')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approach_relations', to='dandisets.asset')),
            ],
            options={
                'unique_together': {('asset', 'approach')},
            },
        ),
        migrations.CreateModel(
            name='AssetsSummaryApproach',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dandisets.approachtype')),
                ('assets_summary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approach_relations', to='dandisets.assetssummary')),
            ],
            options={
                'verbose_name_plural': 'Assets summary approaches',
                'unique_together': {('assets_summary', 'approach')},
            },
        ),
        migrations.CreateModel(
            name='AssetWasGeneratedBy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dandisets.activity')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='was_generated_by', to='dandisets.asset')),
            ],
            options={
                'unique_together': {('asset', 'activity')},
            },
        ),
        migrations.CreateModel(
            name='ContributorAffiliation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('affiliation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dandisets.affiliation')),
                ('contributor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dandisets.contributor')),
            ],
            options={
                'unique_together': {('contributor', 'affiliation')},
            },
        ),
        migrations.CreateModel(
            name='DandisetAccessRequirements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_requirement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dandisets.accessrequirements')),
                ('dandiset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_requirements', to='dandisets.dandiset')),
            ],
            options={
                'unique_together': {('dandiset', 'access_requirement')},
            },
        ),
        migrations.CreateModel(
            name='DandisetContributor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contributor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dandisets.contributor')),
                ('dandiset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dandiset_contributors', to='dandisets.dandiset')),
            ],
            options={
                'unique_together': {('dandiset', 'contributor')},
            },
        ),
        migrations.CreateModel(
            name='DandisetWasGeneratedBy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity', models.ForeignKey(limit_choices_to={'schema_key': 'Project'}, on_delete=django.db.models.deletion.CASCADE, to='dandisets.activity')),
                ('dandiset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='was_generated_by', to='dandisets.dandiset')),
            ],
            options={
                'unique_together': {('dandiset', 'activity')},
            },
        ),
        migrations.CreateModel(
            name='ActivityEquipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='equipment_used', to='dandisets.activity')),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dandisets.equipment')),
            ],
            options={
                'unique_together': {('activity', 'equipment')},
            },
        ),
        migrations.CreateModel(
            name='DandisetEthicsApproval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dandiset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ethics_approvals', to='dandisets.dandiset')),
                ('ethics_approval', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dandisets.ethicsapproval')),
            ],
            options={
                'unique_together': {('dandiset', 'ethics_approval')},
            },
        ),
        migrations.CreateModel(
            name='DandisetAbout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('anatomy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dandisets.anatomy')),
                ('dandiset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='about', to='dandisets.dandiset')),
                ('disorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dandisets.disorder')),
                ('generic_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dandisets.generictype')),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('disorder__isnull', False), ('anatomy__isnull', True), ('generic_type__isnull', True)), models.Q(('disorder__isnull', True), ('anatomy__isnull', False), ('generic_type__isnull', True)), models.Q(('disorder__isnull', True), ('anatomy__isnull', True), ('generic_type__isnull', False)), _connector='OR'), name='only_one_about_type')],
            },
        ),
        migrations.CreateModel(
            name='AssetsSummaryMeasurementTechnique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assets_summary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurement_technique_relations', to='dandisets.assetssummary')),
                ('measurement_technique', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dandisets.measurementtechniquetype')),
            ],
            options={
                'verbose_name_plural': 'Assets summary measurement techniques',
                'unique_together': {('assets_summary', 'measurement_technique')},
            },
        ),
        migrations.CreateModel(
            name='AssetMeasurementTechnique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurement_technique_relations', to='dandisets.asset')),
                ('measurement_technique', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dandisets.measurementtechniquetype')),
            ],
            options={
                'unique_together': {('asset', 'measurement_technique')},
            },
        ),
        migrations.CreateModel(
            name='AssetWasAttributedTo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributed_to', to='dandisets.asset')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dandisets.participant')),
            ],
            options={
                'unique_together': {('asset', 'participant')},
            },
        ),
        migrations.CreateModel(
            name='DandisetRelatedResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dandiset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_resources', to='dandisets.dandiset')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dandisets.resource')),
            ],
            options={
                'unique_together': {('dandiset', 'resource')},
            },
        ),
        migrations.CreateModel(
            name='ActivityAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='associations', to='dandisets.activity')),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dandisets.agent')),
                ('contributor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dandisets.contributor')),
                ('software', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dandisets.software')),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('contributor__isnull', False), ('software__isnull', True), ('agent__isnull', True)), models.Q(('contributor__isnull', True), ('software__isnull', False), ('agent__isnull', True)), models.Q(('contributor__isnull', True), ('software__isnull', True), ('agent__isnull', False)), _connector='OR'), name='only_one_association_type')],
            },
        ),
        migrations.CreateModel(
            name='AssetsSummarySpecies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assets_summary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='species_relations', to='dandisets.assetssummary')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dandisets.speciestype')),
            ],
            options={
                'verbose_name_plural': 'Assets summary species',
                'unique_together': {('assets_summary', 'species')},
            },
        ),
        migrations.CreateModel(
            name='AssetsSummaryDataStandard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assets_summary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_standard_relations', to='dandisets.assetssummary')),
                ('data_standard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dandisets.standardstype')),
            ],
            options={
                'verbose_name_plural': 'Assets summary data standards',
                'unique_together': {('assets_summary', 'data_standard')},
            },
        ),
    ]
